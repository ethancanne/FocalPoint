{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"textStyle\", \"width\", \"height\", \"shadow\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ButtonTypes } from \"../utils/constants/ButtonTypes\";\nexport var RoundedButton = function RoundedButton(_ref) {\n  var _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      _ref$textStyle = _ref.textStyle,\n      textStyle = _ref$textStyle === void 0 ? {} : _ref$textStyle,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 60 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 40 : _ref$height,\n      _ref$shadow = _ref.shadow,\n      shadow = _ref$shadow === void 0 ? true : _ref$shadow,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(props.type),\n      _useState2 = _slicedToArray(_useState, 2),\n      btnType = _useState2[0],\n      setBtnType = _useState2[1];\n\n  var color = '';\n  var backgroundColor = '';\n\n  switch (btnType) {\n    case ButtonTypes.COMPLETE_BTN:\n      backgroundColor = '#8FA87F';\n      color = 'white';\n      break;\n\n    case ButtonTypes.DESTRUCTIVE_BTN:\n      backgroundColor = '#A60000';\n      color = 'white';\n      break;\n\n    case ButtonTypes.NORMAL_BTN:\n      backgroundColor = 'white';\n      color = '#000';\n      break;\n\n    case ButtonTypes.NORMAL_BTN2:\n      backgroundColor = '#F2F2F2';\n      color = '#000';\n      break;\n\n    case ButtonTypes.CLEAR_BTN:\n      backgroundColor = 'rgba(52, 52, 52, 0)';\n      color = 'white';\n      break;\n  }\n\n  return React.createElement(TouchableOpacity, {\n    style: [styles(width, height, color, backgroundColor, shadow).button, style],\n    onPress: props.onPress\n  }, React.createElement(Text, {\n    style: [styles(width, height, color, backgroundColor, shadow).text, textStyle]\n  }, props.title));\n};\n\nvar styles = function styles(width, height, color, backgroundColor, shadow) {\n  var shadowObj = {};\n  if (shadow) shadowObj = {\n    shadowColor: shadow && 'black',\n    shadowOffset: shadow && {\n      width: 2,\n      height: 4\n    },\n    shadowOpacity: shadow && 0.05,\n    shadowRadius: shadow && 3\n  };\n  return StyleSheet.create({\n    button: _objectSpread(_objectSpread({\n      backgroundColor: backgroundColor,\n      height: height,\n      width: width,\n      borderRadius: 4\n    }, shadowObj), {}, {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }),\n    text: {\n      color: color,\n      fontWeight: 'bold'\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ethancannelongo/Desktop/React Native/Focal Point/focalpoint/src/components/RoundedButton.js"],"names":["React","useState","useEffect","ButtonTypes","RoundedButton","style","textStyle","width","height","shadow","props","type","btnType","setBtnType","color","backgroundColor","COMPLETE_BTN","DESTRUCTIVE_BTN","NORMAL_BTN","NORMAL_BTN2","CLEAR_BTN","styles","button","onPress","text","title","shadowObj","shadowColor","shadowOffset","shadowOpacity","shadowRadius","StyleSheet","create","borderRadius","display","justifyContent","alignItems","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { ButtonTypes } from '../utils/constants/ButtonTypes';\n\nexport const RoundedButton = ({\n  style = {},\n  textStyle = {},\n  width = 60,\n  height = 40,\n  shadow=true,\n  ...props\n}) => {\n  const [btnType, setBtnType] = useState(props.type);\n  let color = ''\n  let backgroundColor =''\n\n\n  switch (btnType) {\n    case ButtonTypes.COMPLETE_BTN:\n      backgroundColor = '#8FA87F';\n      color = 'white';\n      break;\n    case ButtonTypes.DESTRUCTIVE_BTN:\n      backgroundColor = '#A60000';\n      color = 'white';\n      break;\n\n    case ButtonTypes.NORMAL_BTN:\n      backgroundColor = 'white';\n      color = '#000';\n      break;\n\n    case ButtonTypes.NORMAL_BTN2:\n      backgroundColor = '#F2F2F2';\n      color = '#000';\n      break;\n\n    case ButtonTypes.CLEAR_BTN:\n      backgroundColor = 'rgba(52, 52, 52, 0)';\n      color = 'white';\n      break;\n  }\n  return (\n    <TouchableOpacity\n      style={[styles(width, height, color, backgroundColor, shadow).button, style]} onPress={props.onPress}>\n      <Text\n        style={[styles(width, height, color, backgroundColor, shadow).text, textStyle]}>\n        {props.title}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\n\nconst styles = (width, height, color, backgroundColor, shadow) =>{\n  let shadowObj = {}\n  if (shadow)\n    shadowObj ={\n      shadowColor: shadow && 'black',\n        shadowOffset: shadow && { width: 2, height: 4 },\n        shadowOpacity:shadow &&  0.05,\n        shadowRadius: shadow && 3,\n    }\n  return(\n    StyleSheet.create({\n      button: {\n        backgroundColor: backgroundColor,\n        height:height,\n        width: width,\n        borderRadius: 4,\n        ...shadowObj,\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      },\n\n      text: {\n        color: color,\n        fontWeight: 'bold',\n      },\n    }\n  ))\n}\n  \n"]},"metadata":{},"sourceType":"module"}