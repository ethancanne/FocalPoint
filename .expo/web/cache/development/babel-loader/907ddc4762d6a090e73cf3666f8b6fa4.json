{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"textStyle\", \"width\", \"height\", \"shadow\"];\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { ButtonTypes } from \"../utils/constants/ButtonTypes\";\nexport var RoundedButton = function RoundedButton(_ref) {\n  var _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      _ref$textStyle = _ref.textStyle,\n      textStyle = _ref$textStyle === void 0 ? {} : _ref$textStyle,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 60 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 40 : _ref$height,\n      _ref$shadow = _ref.shadow,\n      shadow = _ref$shadow === void 0 ? true : _ref$shadow,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useState = useState(props.type),\n      _useState2 = _slicedToArray(_useState, 2),\n      btnType = _useState2[0],\n      setBtnType = _useState2[1];\n\n  var color = '';\n  var backgroundColor = '';\n\n  switch (btnType) {\n    case ButtonTypes.COMPLETE_BTN:\n      backgroundColor = '#8FA87F';\n      color = 'white';\n      break;\n\n    case ButtonTypes.DESTRUCTIVE_BTN:\n      backgroundColor = '#A60000';\n      color = 'white';\n      break;\n\n    case ButtonTypes.NORMAL_BTN:\n      backgroundColor = 'white';\n      color = 'black';\n      break;\n\n    case ButtonTypes.NORMAL_BTN2:\n      backgroundColor = '#F2F2F2';\n      color = 'black';\n      break;\n\n    case ButtonTypes.CLEAR_BTN:\n      backgroundColor = 'none';\n      color = 'white';\n      break;\n  }\n\n  return React.createElement(TouchableOpacity, {\n    style: [styles(width, height, color, backgroundColor, shadow).button, style],\n    onPress: props.onPress\n  }, React.createElement(Text, {\n    style: [styles(width, height, color, backgroundColor, shadow).text, textStyle]\n  }, props.title));\n};\n\nvar styles = function styles(width, height, color, backgroundColor, shadow) {\n  return StyleSheet.create({\n    button: {\n      backgroundColor: \"#fff\",\n      height: height,\n      width: width,\n      borderRadius: 4,\n      shadowColor: shadow && 'black',\n      shadowOffset: shadow && {\n        width: 2,\n        height: 4\n      },\n      shadowOpacity: shadow && 0.05,\n      shadowRadius: shadow && 3,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    text: {\n      color: color,\n      fontWeight: 'bold'\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ethancannelongo/Desktop/React Native/Focal Point/focalpoint/src/components/RoundedButton.js"],"names":["React","useState","useEffect","ButtonTypes","RoundedButton","style","textStyle","width","height","shadow","props","type","btnType","setBtnType","color","backgroundColor","COMPLETE_BTN","DESTRUCTIVE_BTN","NORMAL_BTN","NORMAL_BTN2","CLEAR_BTN","styles","button","onPress","text","title","StyleSheet","create","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","display","justifyContent","alignItems","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, TouchableOpacity } from 'react-native';\nimport { ButtonTypes } from '../utils/constants/ButtonTypes';\n\nexport const RoundedButton = ({\n  style = {},\n  textStyle = {},\n  width = 60,\n  height = 40,\n  shadow=true,\n  ...props\n}) => {\n  const [btnType, setBtnType] = useState(props.type);\n  let color = ''\n  let backgroundColor =''\n\n\n  switch (btnType) {\n    case ButtonTypes.COMPLETE_BTN:\n      backgroundColor = '#8FA87F';\n      color = 'white';\n      break;\n    case ButtonTypes.DESTRUCTIVE_BTN:\n      backgroundColor = '#A60000';\n      color = 'white';\n      break;\n\n    case ButtonTypes.NORMAL_BTN:\n      backgroundColor = 'white';\n      color = 'black';\n      break;\n\n    case ButtonTypes.NORMAL_BTN2:\n      backgroundColor = '#F2F2F2';\n      color = 'black';\n      break;\n\n    case ButtonTypes.CLEAR_BTN:\n      backgroundColor = 'none';\n      color = 'white';\n      break;\n  }\n  return (\n    <TouchableOpacity\n      style={[styles(width, height, color, backgroundColor, shadow).button, style]} onPress={props.onPress}>\n      <Text\n        style={[styles(width, height, color, backgroundColor, shadow).text, textStyle]}>\n        {props.title}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nconst styles = (width, height, color, backgroundColor, shadow) =>\n  StyleSheet.create({\n    button: {\n      backgroundColor: \"#fff\",\n      height:height,\n      width: width,\n      borderRadius: 4,\n      shadowColor: shadow && 'black',\n      shadowOffset: shadow && { width: 2, height: 4 },\n      shadowOpacity:shadow &&  0.05,\n      shadowRadius: shadow && 3,\n\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    },\n\n    text: {\n      color: color,\n      fontWeight: 'bold',\n    },\n  });\n"]},"metadata":{},"sourceType":"module"}