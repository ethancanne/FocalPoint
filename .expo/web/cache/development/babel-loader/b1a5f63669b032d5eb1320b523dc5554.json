{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport { RoundedButton } from \"../../components/RoundedButton\";\nimport { ButtonTypes } from \"../../utils/constants/ButtonTypes\";\nimport { Countdown } from \"../../components/Countdown\";\nimport { styles } from \"./Styles\";\nimport { ProgressBar } from 'react-native-paper';\nimport { Timing } from \"../../components/Timing\";\nimport { useKeepAwake } from 'expo-keep-awake';\nexport var Focus = function Focus(_ref) {\n  var focusSubject = _ref.focusSubject,\n      addSubject = _ref.addSubject,\n      onCountdownEnd = _ref.onCountdownEnd,\n      clearSubject = _ref.clearSubject,\n      startingMinutes = _ref.startingMinutes,\n      setStartingMinutes = _ref.setStartingMinutes;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isStarted = _useState2[0],\n      setIsStarted = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = _slicedToArray(_useState3, 2),\n      progress = _useState4[0],\n      setProgress = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      timeLeft = _useState6[0],\n      setTimeLeft = _useState6[1];\n\n  useKeepAwake();\n\n  var vibrate = function vibrate() {\n    if (Platform.OS === 'ios') {\n      var interval = setInterval(function () {\n        return Vibration.vibrate();\n      }, 1000);\n      setTimeout(function () {\n        return clearInterval(interval);\n      }, 10000);\n    } else {\n      Vibration.vibrate(10000);\n    }\n  };\n\n  var onEnd = function onEnd() {\n    onCountdownEnd();\n    vibrate();\n    setIsStarted(false);\n  };\n\n  var onProgress = function onProgress(progress) {\n    setProgress(progress);\n  };\n\n  var changeTime = function changeTime(min) {\n    setStartingMinutes(min);\n    setProgress(1);\n    setIsStarted(false);\n  };\n\n  useEffect(function () {\n    console.log(timeLeft / 10 / startingMinutes);\n    onProgress(timeLeft / 100);\n  }, [timeLeft]);\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(Text, {\n    style: styles.focusSubjectTxt\n  }, \"Focusing on:\", '\\n', React.createElement(Text, {\n    style: {\n      fontWeight: 'bold'\n    }\n  }, focusSubject)), React.createElement(View, {\n    style: styles.btnAndTimerView\n  }, React.createElement(View, {\n    style: styles.timerView\n  }, React.createElement(Countdown, {\n    isPaused: !isStarted,\n    changeTime: changeTime,\n    startingMinutes: startingMinutes,\n    onProgress: onProgress,\n    setTimeLeft: setTimeLeft,\n    onEnd: onEnd\n  }), React.createElement(ProgressBar, {\n    color: \"gray\",\n    progress: progress,\n    style: {\n      height: 10\n    }\n  })), React.createElement(Timing, {\n    onChangeTime: changeTime\n  })), React.createElement(View, {\n    style: styles.startPauseBtnView\n  }, React.createElement(RoundedButton, {\n    width: \"80%\",\n    type: ButtonTypes.NORMAL_BTN,\n    title: isStarted ? 'Pause' : 'Start',\n    style: {\n      marginTop: 50,\n      padding: 40\n    },\n    textStyle: {\n      fontSize: 30\n    },\n    onPress: function onPress() {\n      setIsStarted(!isStarted);\n    }\n  })), React.createElement(View, {\n    style: styles.navigationView\n  }, React.createElement(RoundedButton, {\n    type: ButtonTypes.DESTRUCTIVE_BTN,\n    title: \"END\",\n    style: {\n      flex: 1,\n      margin: 10\n    },\n    textStyle: {\n      fontSize: 15\n    },\n    onPress: function onPress() {\n      return clearSubject(timeLeft);\n    }\n  }), React.createElement(RoundedButton, {\n    type: ButtonTypes.COMPLETE_BTN,\n    title: \"COMPLETE\",\n    style: {\n      flex: 1,\n      margin: 10\n    },\n    textStyle: {\n      fontSize: 15\n    },\n    onPress: onCountdownEnd\n  })));\n};","map":{"version":3,"sources":["/Users/ethancannelongo/Desktop/React Native/Focal Point/focalpoint/src/features/focus/Focus.js"],"names":["React","useState","useEffect","RoundedButton","ButtonTypes","Countdown","styles","ProgressBar","Timing","useKeepAwake","Focus","focusSubject","addSubject","onCountdownEnd","clearSubject","startingMinutes","setStartingMinutes","isStarted","setIsStarted","progress","setProgress","timeLeft","setTimeLeft","vibrate","Platform","OS","interval","setInterval","Vibration","setTimeout","clearInterval","onEnd","onProgress","changeTime","min","console","log","container","focusSubjectTxt","fontWeight","btnAndTimerView","timerView","height","startPauseBtnView","NORMAL_BTN","marginTop","padding","fontSize","navigationView","DESTRUCTIVE_BTN","flex","margin","COMPLETE_BTN"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  SafeAreaView,\n  TouchableWithoutFeedback,\n  Text,\n  View,\n  TextInput,\n  Pressable,\n  KeyboardAvoidingView,\n  Keyboard,\n  Platform,\n  Dimensions,\n  Vibration,\n} from 'react-native';\nimport { RoundedButton } from '../../components/RoundedButton';\nimport { ButtonTypes } from '../../utils/constants/ButtonTypes';\nimport { Countdown } from '../../components/Countdown';\nimport { styles } from './Styles';\nimport { ProgressBar } from 'react-native-paper';\nimport { Timing } from '../../components/Timing';\nimport { useKeepAwake } from 'expo-keep-awake';\n\nexport const Focus = ({ focusSubject, addSubject, onCountdownEnd, clearSubject, startingMinutes, setStartingMinutes }) => {\n  const [isStarted, setIsStarted] = useState(false);\n  const [progress, setProgress] = useState(1);\n  const [timeLeft, setTimeLeft] = useState(0);\n\n  useKeepAwake();\n\n  const vibrate = () => {\n    if (Platform.OS === 'ios') {\n      const interval = setInterval(() => Vibration.vibrate(), 1000);\n      setTimeout(() => clearInterval(interval), 10000);\n    } else {\n      Vibration.vibrate(10000);\n    }\n  };\n\n  const onEnd = () => {\n    onCountdownEnd()\n    vibrate();\n    setIsStarted(false);\n  };\n\n  const onProgress = (progress) => {\n    setProgress(progress);\n  };\n\n  const changeTime = (min) => {\n    setStartingMinutes(min);\n    setProgress(1);\n    setIsStarted(false);\n  };\n\n  useEffect(()=>{\n    console.log((timeLeft/10)/startingMinutes)\n    onProgress(timeLeft/100);\n  }, [timeLeft])\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.focusSubjectTxt}>\n        Focusing on:{'\\n'}\n      <Text style={{ fontWeight: 'bold' }}>{focusSubject}</Text>\n      </Text>\n      <View style={styles.btnAndTimerView}>\n        <View style={styles.timerView}>\n          <Countdown\n            isPaused={!isStarted}\n            changeTime={changeTime}\n            startingMinutes={startingMinutes}\n            onProgress={onProgress}\n            setTimeLeft={setTimeLeft}\n            onEnd={onEnd}\n          />\n          <ProgressBar\n            color=\"gray\"\n            progress={progress}\n            style={{ height: 10 }}\n          />\n        </View>\n        \n        <Timing onChangeTime={changeTime} />\n      </View>\n      <View style={styles.startPauseBtnView}>\n        <RoundedButton\n          width=\"80%\"\n          type={ButtonTypes.NORMAL_BTN}\n          title={isStarted ? 'Pause' : 'Start'}\n          style={{ marginTop: 50, padding: 40 }}\n          textStyle={{ fontSize: 30 }}\n          onPress={() => {\n            setIsStarted(!isStarted);\n          }}\n        />\n      </View>\n      <View style={styles.navigationView}>\n        <RoundedButton\n          type={ButtonTypes.DESTRUCTIVE_BTN}\n          title=\"END\"\n          style={{ flex: 1, margin: 10 }}\n          textStyle={{ fontSize: 15 }}\n          onPress={()=>clearSubject(timeLeft)}\n        />\n        <RoundedButton\n          type={ButtonTypes.COMPLETE_BTN}\n          title=\"COMPLETE\"\n          style={{ flex: 1, margin: 10 }}\n          textStyle={{ fontSize: 15 }}\n          onPress={onCountdownEnd}\n        />\n      </View>\n    </SafeAreaView>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}