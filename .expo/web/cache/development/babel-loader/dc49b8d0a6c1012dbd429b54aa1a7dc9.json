{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\n\nvar minutesToMil = function minutesToMil(min) {\n  return min * 1000 * 60;\n};\n\nvar milToMinutes = function milToMinutes(mil) {\n  return mil / 1000 / 60;\n};\n\nvar formatTime = function formatTime(time) {\n  return time < 10 ? \"0\" + time : time;\n};\n\nexport var Countdown = function Countdown(_ref) {\n  var startingMinutes = _ref.startingMinutes,\n      setTimeLeft = _ref.setTimeLeft,\n      isPaused = _ref.isPaused,\n      onProgress = _ref.onProgress,\n      onEnd = _ref.onEnd,\n      changeTime = _ref.changeTime;\n\n  var _useState = useState(100),\n      _useState2 = _slicedToArray(_useState, 2),\n      mil = _useState2[0],\n      setMil = _useState2[1];\n\n  var _useState3 = useState(startingMinutes),\n      _useState4 = _slicedToArray(_useState3, 2),\n      minutes = _useState4[0],\n      setMinutes = _useState4[1];\n\n  var interval = useRef(null);\n\n  var countDown = function countDown() {\n    setMil(function (time) {\n      if (time === 0) {\n        clearInterval(interval.current);\n\n        if (mil === 0) {\n          onEnd();\n        }\n\n        return time;\n      }\n\n      var timeLeft = time - 1000;\n      setTimeLeft(Math.round(milToMinutes(timeLeft) * 100) / 100);\n      return timeLeft;\n    });\n  };\n\n  useEffect(function () {\n    if (isPaused) {\n      if (interval.current) clearInterval(interval.current);\n      return;\n    }\n\n    interval.current = setInterval(countDown, 1000);\n    return function () {\n      return clearInterval(interval.current);\n    };\n  }, [isPaused]);\n  useEffect(function () {\n    setMil(minutesToMil(startingMinutes));\n  }, [startingMinutes]);\n  useEffect(function () {}, [mil]);\n\n  var formatCustomTime = function formatCustomTime(time) {\n    var currentTimeString = String(milToMinutes(mil)) + String(time);\n\n    if (currentTimeString.length > 2 || parseInt(currentTimeString) > 59) {\n      setMil(0);\n      console.log(currentTimeString);\n    } else {\n      var milValue = time === \"Backspace\" ? 0 : mil !== 0 ? minutesToMil(parseInt(currentTimeString)) : minutesToMil(time);\n      setMil(milValue);\n      changeTime(parseInt(currentTimeString));\n    }\n  };\n\n  var minute = Math.floor(mil / 1000 / 60) % 60;\n  var second = Math.floor(mil / 1000) % 60;\n  return React.createElement(View, null, isPaused ? React.createElement(TextInput, {\n    keyboardType: \"numeric\",\n    style: styles.timerTxt,\n    onKeyPress: function onKeyPress(_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      formatCustomTime(nativeEvent.key);\n    },\n    value: formatTime(minute) + \":\" + formatTime(second)\n  }) : React.createElement(Text, {\n    style: styles.timerTxt\n  }, formatTime(minute), \":\", formatTime(second)));\n};\nexport var styles = StyleSheet.create({\n  timerTxt: {\n    fontSize: 70,\n    textAlign: 'center',\n    marginBottom: 10\n  }\n});","map":{"version":3,"sources":["/Users/ethancannelongo/Desktop/React Native/Focal Point/focalpoint/src/components/Countdown.js"],"names":["React","useState","useEffect","useRef","minutesToMil","min","milToMinutes","mil","formatTime","time","Countdown","startingMinutes","setTimeLeft","isPaused","onProgress","onEnd","changeTime","setMil","minutes","setMinutes","interval","countDown","clearInterval","current","timeLeft","Math","round","setInterval","formatCustomTime","currentTimeString","String","length","parseInt","console","log","milValue","minute","floor","second","styles","timerTxt","nativeEvent","key","StyleSheet","create","fontSize","textAlign","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { StyleSheet, Text, View, TextInput } from 'react-native';\n\nconst minutesToMil = (min) => min * 1000 * 60;\nconst milToMinutes = (mil) => mil / 1000 / 60;\nconst formatTime = (time) => (time < 10 ? `0${time}` : time);\n\nexport const Countdown = ({ startingMinutes, setTimeLeft, isPaused, onProgress, onEnd, changeTime }) => {\n  const [mil, setMil] = useState(100);\n  const [minutes, setMinutes] = useState(startingMinutes);\n\n  const interval = useRef(null);\n\n  const countDown = () => {\n    setMil((time) => {\n      if (time === 0) {\n        clearInterval(interval.current);\n        if(mil === 0){\n          onEnd();\n        }\n        return time;\n      }\n      const timeLeft = time - 1000;\n      setTimeLeft(Math.round(milToMinutes(timeLeft) * 100) / 100)\n      return timeLeft;\n    });\n  };\n\n  useEffect(() => {\n    if (isPaused) {\n      if (interval.current) clearInterval(interval.current);\n      return;\n    }\n    interval.current = setInterval(countDown, 1000);\n    return () => clearInterval(interval.current);\n  }, [isPaused]);\n\n  useEffect(() => {\n    setMil(minutesToMil(startingMinutes));\n  }, [startingMinutes]);\n\n  useEffect(()=>{\n  },[mil])\n\n  const formatCustomTime= (time)=>{\n    const currentTimeString = String(milToMinutes(mil)) + String(time)\n    if (currentTimeString.length > 2 || parseInt(currentTimeString) > 59){\n      setMil(0)\n      console.log(currentTimeString)\n    }else{\n       const milValue = time === \"Backspace\" ? 0 : mil !== 0 ?  minutesToMil(parseInt(currentTimeString)) : minutesToMil(time)\n        setMil(milValue)\n        changeTime(parseInt(currentTimeString))\n    }\n  }\n\n  const minute = Math.floor(mil / 1000 / 60) % 60;\n  const second = Math.floor(mil / 1000) % 60;\n\n  return (\n    <View>\n      {isPaused ? (\n        <TextInput\n          keyboardType=\"numeric\"\n          style={styles.timerTxt}\n          onKeyPress={({ nativeEvent })=> {\n            formatCustomTime(nativeEvent.key)\n          }}\n          value={formatTime(minute)+\":\"+formatTime(second)}\n          />\n      ) : (\n        <Text\n          style={styles.timerTxt}>\n          {formatTime(minute)}:{formatTime(second)}\n        </Text>\n      )}\n      </View>\n    );\n};\n\nexport const styles = StyleSheet.create({\n  timerTxt: {\n    fontSize: 70,\n    textAlign: 'center',\n    marginBottom: 10,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}